/* The following code was generated by JFlex 1.4.3 on 11/13/21 7:34 PM */

package myjavalexcal;
import static myjavalexcal.JavaTokens.*;
import java.util.Hashtable;
import java.util.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/13/21 7:34 PM from the specification file
 * <tt>E:/fourth_year/411/compiler/Abdo/project/JflexProject/myJavaLexcal/src/myjavalexcal/Lexer.flex</tt>
 */
class javaScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\2\0\1\1\22\0\1\2\1\72\1\20\1\0"+
    "\1\16\1\0\1\71\1\17\1\56\1\57\1\75\1\13\1\0\1\13"+
    "\1\14\1\74\1\4\3\25\4\6\2\5\1\0\1\64\1\66\1\65"+
    "\1\67\2\0\3\10\1\15\1\12\1\54\5\16\1\11\1\16\1\55"+
    "\4\16\1\53\4\16\1\7\2\16\1\62\1\21\1\63\1\0\1\16"+
    "\1\0\1\26\1\22\1\32\1\41\1\36\1\23\1\45\1\40\1\34"+
    "\1\16\1\44\1\42\1\51\1\24\1\33\1\43\1\16\1\31\1\27"+
    "\1\30\1\35\1\50\1\37\1\52\1\46\1\47\1\60\1\0\1\61"+
    "\1\73\u1fa7\0\1\70\udfd9\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\2\4\3\1\24\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\1\1\3\2\0\1\3"+
    "\1\0\2\21\1\4\3\0\1\22\1\0\31\4\1\23"+
    "\6\4\1\23\12\4\1\24\1\2\1\0\1\3\1\21"+
    "\1\0\1\4\1\25\2\0\31\4\1\23\21\4\1\0"+
    "\6\4\1\26\5\4\1\27\16\4\1\23\2\4\1\30"+
    "\1\23\5\4\1\23\51\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\76\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u0744\0\76\0\76\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\76\0\u087a\0\u08b8\0\76\0\u08f6\0\u0934\0\u0972\0\u022e"+
    "\0\76\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0136\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\76\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\76\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u0136\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u0136"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\u273c\0\u0136\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u1aa4\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222"+
    "\0\u3260\0\u329e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\2\6\3\7\1\10\1\2"+
    "\1\11\2\7\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\6\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\7\1\26\1\27\1\7\1\30\1\31\1\32\1\7"+
    "\1\33\2\7\1\34\1\35\1\7\1\36\1\37\1\7"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\2\1\53\1\54\1\55\1\2"+
    "\101\0\1\4\76\0\1\56\1\57\1\56\1\60\1\0"+
    "\1\61\1\62\1\0\1\63\1\64\5\0\1\64\1\0"+
    "\1\56\10\0\1\62\2\0\1\64\1\61\7\0\1\60"+
    "\1\0\1\64\25\0\3\6\2\0\1\61\1\62\1\0"+
    "\1\63\1\64\5\0\1\64\1\0\1\6\10\0\1\62"+
    "\2\0\1\64\1\61\11\0\1\64\25\0\7\7\2\0"+
    "\2\7\3\0\34\7\24\0\7\7\2\0\2\7\3\0"+
    "\30\7\1\65\3\7\24\0\3\63\16\0\1\63\50\0"+
    "\1\66\1\0\1\66\1\0\13\66\1\0\1\66\1\67"+
    "\54\66\1\70\1\0\1\70\1\0\14\70\1\71\1\72"+
    "\54\70\4\0\7\7\2\0\2\7\3\0\7\7\1\73"+
    "\1\7\1\74\12\7\1\75\7\7\24\0\7\7\2\0"+
    "\2\7\3\0\4\7\1\76\4\7\1\77\1\100\5\7"+
    "\1\101\13\7\24\0\7\7\2\0\2\7\3\0\4\7"+
    "\1\102\6\7\1\103\1\104\17\7\24\0\7\7\2\0"+
    "\2\7\3\0\1\105\4\7\1\106\26\7\24\0\7\7"+
    "\2\0\2\7\3\0\6\7\1\107\4\7\1\110\1\7"+
    "\1\111\1\112\5\7\1\113\7\7\24\0\7\7\2\0"+
    "\2\7\3\0\7\7\1\114\6\7\1\115\15\7\24\0"+
    "\7\7\2\0\2\7\3\0\14\7\1\116\17\7\24\0"+
    "\7\7\2\0\2\7\3\0\4\7\1\117\4\7\1\120"+
    "\4\7\1\121\1\7\1\122\13\7\24\0\7\7\2\0"+
    "\2\7\3\0\13\7\1\123\20\7\24\0\7\7\2\0"+
    "\2\7\3\0\1\7\1\124\1\125\24\7\1\126\4\7"+
    "\24\0\7\7\2\0\2\7\3\0\2\7\1\127\15\7"+
    "\1\130\7\7\1\131\3\7\24\0\7\7\2\0\2\7"+
    "\3\0\16\7\1\132\15\7\24\0\7\7\2\0\2\7"+
    "\3\0\11\7\1\133\2\7\1\134\17\7\24\0\7\7"+
    "\2\0\2\7\3\0\11\7\1\135\22\7\24\0\7\7"+
    "\2\0\2\7\3\0\4\7\1\136\2\7\1\137\3\7"+
    "\1\140\20\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\141\22\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\142\22\7\24\0\7\7\2\0\2\7\3\0\4\7"+
    "\1\143\27\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\144\25\7\24\0\7\7\2\0\2\7\3\0\12\7"+
    "\1\145\21\7\111\0\1\146\100\0\1\147\1\150\4\0"+
    "\1\56\1\57\1\56\2\0\1\61\1\62\1\0\1\63"+
    "\1\64\5\0\1\64\1\0\1\56\10\0\1\62\2\0"+
    "\1\64\1\61\11\0\1\64\25\0\3\57\3\0\1\62"+
    "\1\0\1\63\1\64\5\0\1\64\1\0\1\57\10\0"+
    "\1\62\2\0\1\64\12\0\1\64\25\0\3\151\1\0"+
    "\1\151\1\0\1\151\2\0\1\151\4\0\2\151\1\0"+
    "\2\151\3\0\1\151\3\0\1\151\2\0\1\151\12\0"+
    "\1\151\25\0\3\152\4\0\1\153\11\0\1\152\54\0"+
    "\3\63\3\0\1\62\2\0\1\64\5\0\1\64\1\0"+
    "\1\63\10\0\1\62\2\0\1\64\12\0\1\64\25\0"+
    "\7\7\2\0\2\7\3\0\10\7\1\154\23\7\37\0"+
    "\1\155\62\0\1\156\1\0\1\157\10\0\6\66\1\156"+
    "\2\0\2\66\50\0\1\70\1\0\1\70\10\0\7\70"+
    "\2\0\2\70\50\0\7\7\2\0\2\7\3\0\14\7"+
    "\1\160\17\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\161\22\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\162\25\7\24\0\7\7\2\0\2\7\3\0\20\7"+
    "\1\163\13\7\24\0\7\7\2\0\2\7\3\0\7\7"+
    "\1\124\24\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\164\31\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\165\22\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\166\25\7\24\0\7\7\2\0\2\7\3\0\20\7"+
    "\1\167\13\7\24\0\7\7\2\0\2\7\3\0\15\7"+
    "\1\124\16\7\24\0\7\7\2\0\2\7\3\0\5\7"+
    "\1\170\26\7\24\0\7\7\2\0\2\7\3\0\5\7"+
    "\1\171\26\7\24\0\7\7\2\0\2\7\3\0\4\7"+
    "\1\172\2\7\1\173\24\7\24\0\7\7\2\0\2\7"+
    "\3\0\21\7\1\174\12\7\24\0\7\7\2\0\2\7"+
    "\3\0\12\7\1\175\21\7\24\0\7\7\2\0\2\7"+
    "\3\0\11\7\1\176\22\7\24\0\7\7\2\0\2\7"+
    "\3\0\2\7\1\177\31\7\24\0\7\7\2\0\2\7"+
    "\3\0\4\7\1\200\6\7\1\201\10\7\1\124\7\7"+
    "\24\0\7\7\2\0\2\7\3\0\7\7\1\202\2\7"+
    "\1\203\21\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\204\25\7\24\0\7\7\2\0\2\7\3\0\5\7"+
    "\1\162\1\205\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\2\7\1\206\31\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\77\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\207\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\6\7\1\124\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\5\7\1\210\1\211\25\7\24\0\7\7\2\0\2\7"+
    "\3\0\21\7\1\212\12\7\24\0\7\7\2\0\2\7"+
    "\3\0\13\7\1\213\20\7\24\0\7\7\2\0\2\7"+
    "\3\0\5\7\1\162\26\7\24\0\7\7\2\0\2\7"+
    "\3\0\6\7\1\214\25\7\24\0\7\7\2\0\2\7"+
    "\3\0\12\7\1\215\21\7\24\0\7\7\2\0\2\7"+
    "\3\0\13\7\1\216\20\7\24\0\7\7\2\0\2\7"+
    "\3\0\1\7\1\217\32\7\24\0\7\7\2\0\2\7"+
    "\3\0\2\7\1\220\31\7\24\0\7\7\2\0\2\7"+
    "\3\0\10\7\1\221\23\7\24\0\7\7\2\0\2\7"+
    "\3\0\11\7\1\222\1\223\21\7\24\0\7\7\2\0"+
    "\2\7\3\0\1\224\33\7\24\0\7\7\2\0\2\7"+
    "\3\0\6\7\1\225\25\7\24\0\7\7\2\0\2\7"+
    "\3\0\12\7\1\226\5\7\1\227\13\7\24\0\7\7"+
    "\2\0\2\7\3\0\12\7\1\230\21\7\24\0\7\7"+
    "\2\0\2\7\3\0\7\7\1\231\24\7\24\0\7\7"+
    "\2\0\2\7\3\0\20\7\1\232\13\7\20\0\1\147"+
    "\1\0\1\147\1\0\72\147\75\150\1\233\4\0\3\151"+
    "\1\0\1\151\1\61\1\151\2\0\1\151\4\0\2\151"+
    "\1\0\2\151\3\0\1\151\3\0\1\151\2\0\1\151"+
    "\1\61\11\0\1\151\25\0\3\152\6\0\1\64\5\0"+
    "\1\64\1\0\1\152\13\0\1\64\12\0\1\64\25\0"+
    "\3\152\16\0\1\152\54\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\234\17\7\24\0\1\157\1\0\1\157\10\0"+
    "\1\155\5\0\1\157\54\0\1\66\1\0\1\66\10\0"+
    "\1\155\5\0\1\66\54\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\235\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\20\7\1\236\13\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\124\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\5\7\1\237\26\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\240\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\123\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\12\7\1\241\21\7\24\0\7\7\2\0\2\7\3\0"+
    "\20\7\1\242\13\7\24\0\7\7\2\0\2\7\3\0"+
    "\6\7\1\243\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\176\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\6\7\1\244\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\12\7\1\245\21\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\77\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\6\7\1\205\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\7\7\1\123\24\7\24\0\7\7\2\0\2\7\3\0"+
    "\10\7\1\246\23\7\24\0\7\7\2\0\2\7\3\0"+
    "\2\7\1\247\31\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\250\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\11\7\1\251\22\7\24\0\7\7\2\0\2\7\3\0"+
    "\5\7\1\124\26\7\24\0\7\7\2\0\2\7\3\0"+
    "\13\7\1\252\20\7\24\0\7\7\2\0\2\7\3\0"+
    "\10\7\1\253\23\7\24\0\7\7\2\0\2\7\3\0"+
    "\5\7\1\123\1\254\25\7\24\0\7\7\2\0\2\7"+
    "\3\0\5\7\1\203\26\7\24\0\7\7\2\0\2\7"+
    "\3\0\6\7\1\255\25\7\24\0\7\7\2\0\2\7"+
    "\3\0\14\7\1\256\17\7\24\0\7\7\2\0\2\7"+
    "\3\0\11\7\1\176\6\7\1\257\13\7\24\0\7\7"+
    "\2\0\2\7\3\0\27\7\1\124\4\7\24\0\7\7"+
    "\2\0\2\7\3\0\14\7\1\260\17\7\24\0\7\7"+
    "\2\0\2\7\3\0\20\7\1\162\13\7\24\0\7\7"+
    "\2\0\2\7\3\0\1\215\33\7\24\0\7\7\2\0"+
    "\2\7\3\0\4\7\1\261\27\7\24\0\7\7\2\0"+
    "\2\7\3\0\23\7\1\124\10\7\24\0\7\7\2\0"+
    "\2\7\3\0\22\7\1\262\11\7\24\0\7\7\2\0"+
    "\2\7\3\0\6\7\1\263\25\7\24\0\7\7\2\0"+
    "\2\7\3\0\2\7\1\264\23\7\1\265\5\7\24\0"+
    "\7\7\2\0\2\7\3\0\20\7\1\244\13\7\24\0"+
    "\7\7\2\0\2\7\3\0\11\7\1\124\22\7\24\0"+
    "\7\7\2\0\2\7\3\0\17\7\1\124\14\7\24\0"+
    "\7\7\2\0\2\7\3\0\4\7\1\266\27\7\24\0"+
    "\7\7\2\0\2\7\3\0\2\7\1\124\31\7\24\0"+
    "\7\7\2\0\2\7\3\0\12\7\1\135\21\7\24\0"+
    "\7\7\2\0\2\7\3\0\14\7\1\267\17\7\20\0"+
    "\74\150\1\4\1\233\4\0\7\7\2\0\2\7\3\0"+
    "\21\7\1\270\12\7\24\0\7\7\2\0\2\7\3\0"+
    "\22\7\1\124\11\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\271\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\272\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\20\7\1\273\13\7\24\0\7\7\2\0\2\7\3\0"+
    "\26\7\1\162\5\7\24\0\7\7\2\0\2\7\3\0"+
    "\7\7\1\274\24\7\24\0\7\7\2\0\2\7\3\0"+
    "\12\7\1\275\21\7\24\0\7\7\2\0\2\7\3\0"+
    "\10\7\1\276\23\7\24\0\7\7\2\0\2\7\3\0"+
    "\16\7\1\277\15\7\24\0\7\7\2\0\2\7\3\0"+
    "\5\7\1\300\26\7\24\0\7\7\2\0\2\7\3\0"+
    "\15\7\1\301\16\7\24\0\7\7\2\0\2\7\3\0"+
    "\7\7\1\230\24\7\24\0\7\7\2\0\2\7\3\0"+
    "\16\7\1\124\15\7\24\0\7\7\2\0\2\7\3\0"+
    "\12\7\1\302\21\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\303\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\7\7\1\304\24\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\305\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\2\7\1\306\31\7\24\0\7\7\2\0\2\7\3\0"+
    "\13\7\1\307\20\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\310\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\14\7\1\311\17\7\24\0\7\7\2\0\2\7\3\0"+
    "\6\7\1\312\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\4\7\1\75\27\7\24\0\7\7\2\0\2\7\3\0"+
    "\6\7\1\132\25\7\24\0\7\7\2\0\2\7\3\0"+
    "\33\7\1\313\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\314\25\7\24\0\7\7\2\0\2\7\3\0\4\7"+
    "\1\230\27\7\24\0\7\7\2\0\2\7\3\0\20\7"+
    "\1\315\13\7\24\0\7\7\2\0\2\7\3\0\4\7"+
    "\1\316\27\7\24\0\7\7\2\0\2\7\3\0\10\7"+
    "\1\124\23\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\317\25\7\24\0\7\7\2\0\2\7\3\0\7\7"+
    "\1\320\24\7\24\0\7\7\2\0\2\7\3\0\12\7"+
    "\1\321\21\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\322\31\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\323\31\7\24\0\7\7\2\0\2\7\3\0\1\7"+
    "\1\324\32\7\24\0\7\7\2\0\2\7\3\0\27\7"+
    "\1\325\4\7\24\0\7\7\2\0\2\7\3\0\17\7"+
    "\1\203\14\7\24\0\7\7\2\0\2\7\3\0\20\7"+
    "\1\123\13\7\24\0\7\7\2\0\2\7\3\0\23\7"+
    "\1\162\10\7\24\0\7\7\2\0\2\7\3\0\10\7"+
    "\1\326\23\7\24\0\7\7\2\0\2\7\3\0\20\7"+
    "\1\230\13\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\327\22\7\24\0\7\7\2\0\2\7\3\0\12\7"+
    "\1\330\21\7\24\0\7\7\2\0\2\7\3\0\24\7"+
    "\1\124\7\7\24\0\7\7\2\0\2\7\3\0\10\7"+
    "\1\123\23\7\24\0\7\7\2\0\2\7\3\0\1\7"+
    "\1\331\32\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\332\22\7\24\0\7\7\2\0\2\7\3\0\14\7"+
    "\1\333\17\7\24\0\7\7\2\0\2\7\3\0\13\7"+
    "\1\162\20\7\24\0\7\7\2\0\2\7\3\0\10\7"+
    "\1\334\23\7\24\0\7\7\2\0\2\7\3\0\4\7"+
    "\1\335\27\7\24\0\7\7\2\0\2\7\3\0\14\7"+
    "\1\336\17\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\337\25\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\340\25\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\230\22\7\24\0\7\7\2\0\2\7\3\0\21\7"+
    "\1\124\12\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\341\31\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\123\31\7\24\0\7\7\2\0\2\7\3\0\14\7"+
    "\1\342\17\7\24\0\7\7\2\0\2\7\3\0\10\7"+
    "\1\162\23\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\343\31\7\24\0\7\7\2\0\2\7\3\0\14\7"+
    "\1\226\17\7\24\0\7\7\2\0\2\7\3\0\32\7"+
    "\1\344\1\7\24\0\7\7\2\0\2\7\3\0\12\7"+
    "\1\345\21\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\346\22\7\24\0\7\7\2\0\2\7\3\0\6\7"+
    "\1\203\25\7\24\0\7\7\2\0\2\7\3\0\11\7"+
    "\1\347\22\7\24\0\7\7\2\0\2\7\3\0\25\7"+
    "\1\337\6\7\24\0\7\7\2\0\2\7\3\0\1\7"+
    "\1\124\32\7\24\0\7\7\2\0\2\7\3\0\13\7"+
    "\1\350\20\7\24\0\7\7\2\0\2\7\3\0\2\7"+
    "\1\351\31\7\24\0\7\7\2\0\2\7\3\0\17\7"+
    "\1\352\14\7\24\0\6\7\1\10\2\0\2\7\3\0"+
    "\34\7\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\33\1\12\11\1\1\2\11"+
    "\2\1\2\0\1\11\1\0\1\1\1\11\1\1\3\0"+
    "\1\11\1\0\53\1\1\11\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\2\0\53\1\1\0\117\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	//Map map=new HashMap();  



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  javaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  javaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaTokens nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return  new JavaTokens(TokenKind.Defaut,"nothing","!");
          }
        case 25: break;
        case 20: 
          { return  new JavaTokens(TokenKind.AMPERSAND,"nothing","&");
          }
        case 26: break;
        case 17: 
          { return  new JavaTokens(TokenKind.FLOATLIT,"nothing",yytext() );
          }
        case 27: break;
        case 21: 
          { return  new JavaTokens(TokenKind.CHARLIT);
          }
        case 28: break;
        case 19: 
          { return  new JavaTokens(TokenKind.Keyword,"nothing",yytext());
          }
        case 29: break;
        case 11: 
          { return  new JavaTokens(TokenKind.sym_Suma,"nothing",";");
          }
        case 30: break;
        case 4: 
          { return  new JavaTokens(TokenKind.IDENT,"nothing",yytext());
          }
        case 31: break;
        case 13: 
          { return  new JavaTokens(TokenKind.graterthan,"nothing","<");
          }
        case 32: break;
        case 8: 
          { return  new JavaTokens(TokenKind.RIGHTCURLY,"nothing","}");
          }
        case 33: break;
        case 24: 
          { return  new JavaTokens(TokenKind.BOOLEANLIT,"nothing","flase");
          }
        case 34: break;
        case 7: 
          { return new JavaTokens(TokenKind.LEFTCURLY,"nothing","{");
          }
        case 35: break;
        case 3: 
          { return  new JavaTokens(TokenKind.INTEGERLIT,"nothing",yytext());
          }
        case 36: break;
        case 6: 
          { return new JavaTokens(TokenKind.RIGHT,"nothing",")");
          }
        case 37: break;
        case 12: 
          { return  new JavaTokens(TokenKind.Equal,"nothing","=");
          }
        case 38: break;
        case 23: 
          { return  new JavaTokens(TokenKind.BOOLEANLIT,"nothing","true");
          }
        case 39: break;
        case 18: 
          { return  new JavaTokens(TokenKind.STRINGLIT);
          }
        case 40: break;
        case 16: 
          { return  new JavaTokens(TokenKind.TILDE,"nothing","~");
          }
        case 41: break;
        case 22: 
          { return  new JavaTokens(TokenKind.NULLLIT,"nothing","null");
          }
        case 42: break;
        case 9: 
          { return  new JavaTokens(TokenKind.LEFTSQ,"nothing","[");
          }
        case 43: break;
        case 14: 
          { return  new JavaTokens(TokenKind.smallthan,"nothing",">");
          }
        case 44: break;
        case 10: 
          { return  new JavaTokens(TokenKind.RIGHTSQ,"nothing","]");
          }
        case 45: break;
        case 1: 
          { return  new JavaTokens(TokenKind.Unknown);
          }
        case 46: break;
        case 2: 
          { 
          }
        case 47: break;
        case 5: 
          { return  new JavaTokens(TokenKind.LEFT,"nothing","(");
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return  new JavaTokens(TokenKind.EndFile);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
